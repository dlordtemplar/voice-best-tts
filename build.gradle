plugins {
    id 'de.dfki.mary.voicebuilding-legacy' version '5.2.0'
    id "de.undercouch.download" version "3.2.0"
}

group 'de.uni-saarland.coli.voicebuilding2017.best-tts'
version '0.1-SNAPSHOT'

voice {
    name = 'best-tts'
    language = 'en'
    region = 'US'
    gender = 'male'
    type = 'unit selection'
    description = 'A male US English unit selection voice, built from recordings recorded at Saarland University'
    license {
        name = 'Arctic License'
        shortName = 'Arctic'
        url = 'http://mary.dfki.de/download/arctic-license.html'
    }
    samplingRate = 16000
}

task downloadWavZip(type: de.undercouch.gradle.tasks.download.Download) {
    src 'https://github.com/dlordtemplar/voice-best-tts/releases/download/v0.1/wav.zip'
    dest buildDir
    overwrite false
}

task unpackWav(type: Copy) {
    from zipTree("$buildDir/wav.zip")
    into buildDir
    dependsOn downloadWavZip
}

task downloadTextZip(type: de.undercouch.gradle.tasks.download.Download) {
    src 'https://github.com/dlordtemplar/voice-best-tts/releases/download/v0.1/text.zip'
    dest buildDir
    overwrite false
}

task unpackText(type: Copy) {
    from zipTree("$buildDir/text.zip")
    into "$buildDir"
    includeEmptyDirs = false
    dependsOn downloadTextZip
}

task downloadTextgridsZip(type: de.undercouch.gradle.tasks.download.Download) {
    src 'https://github.com/dlordtemplar/voice-best-tts/releases/download/v0.1/textgrids.zip'
    dest buildDir
    overwrite false
}

task unpackTextgrids(type: Copy) {
    from zipTree("$buildDir/textgrids.zip")
    into "$buildDir"
    includeEmptyDirs = false
    dependsOn downloadTextgridsZip
}

task convertTextGrids {
    ext.labDir = file("$buildDir/lab_maus")
    outputs.dir labDir
    dependsOn unpackTextgrids
    doLast {
        labDir.mkdirs()
        def scriptFile = file("$temporaryDir/script.praat")
        scriptFile.withWriter { script ->
            fileTree(buildDir).include('textgrids/*.TextGrid').each { textGridFile ->
                def labFile = file("$labDir/${textGridFile.name - 'TextGrid' + 'lab'}")
                script.println "Read from file... $textGridFile"
                script.println "Extract tier... 1"
                script.println "Save as Xwaves label file... $labFile"
                script.println "printline Wrote $labFile.name"
            }
        }
        exec {
            commandLine 'praat', '--run', scriptFile
        }
    }
}

task remapLabels(type: Copy) {
    from convertTextGrids.labDir
    into "$buildDir/lab"
    dependsOn convertTextGrids
    filter {
        def phoneMapping = [
                '<p:>' : '_',
                'i:'   : 'i',
                'O:'   : 'O',
                '3`'   : 'r=',
                'Q'    : 'A',
                'R'    : 'r',
                'u:'   : 'u',
                'aI'   : 'AI',
                'eI'   : 'EI',
                '<usb>': '_'
        ]
        def fields = it.tokenize()
        if (fields.size() == 3) {
            fields[-1] = phoneMapping[fields[-1]] ?: fields[-1]
        }
        fields.join(' ')
    }
}


legacyInit {
    dependsOn unpackWav, unpackText, unpackTextgrids, remapLabels
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'groovy-all') {
            details.useTarget group: details.requested.group, name: details.requested.name, version: '2.4.7'
        }
    }
}